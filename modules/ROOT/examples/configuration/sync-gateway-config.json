// tag::getting-started-config[]
//
{
  //  ... additional configuration data as required ...
  "log": ["*"],
  "databases": {
    "getting-started-db": {
      "server": "http://localhost:8091",
      "bucket": "getting-started-bucket",
      "username": "sync_gateway", // <1>
      "password": "password", // <2>
      "enable_shared_bucket_access": true, // <3>
      "import_docs": true,
      "num_index_replicas": 0, // <4>
      "users": {
        "GUEST": { "disabled": false, "admin_channels": ["*"] }
      }
    }
    //  ... additional configuration data as required ...
  }
}
//
// end::getting-started-config[]

// tag::icr-replication-config[]
//
{
//  ... may be preceded by additional configuration data as required by the user ...

"databases": {
  "db": {
    "replications": {
      "repl_id_1": {
        "remote": "https://remoteSG:4984/remoteDB",
      	"direction": "pull",
      	"purge_on_removal":true,
      	"continuous":true,
      	"filter":"sync_gateway/bychannel",
      	"conflict_resolution_type":"custom",
      	"custom_conflict_resolver": `func(local, remote) {...}`,
      }

    }
  }
  //  ... may be followed by additional configuration data as required by the user ...
}
//
// end::icr-replication-config[]

// tag::import-filter-config[]
//
{
  //  ... may be preceded by additional configuration data as required by the user ...
  "log": ["*"],
  "databases": {
    "getting-started-db": {
      "server": "http://localhost:8091",
      "bucket": "getting-started-bucket",
      "username": "sync_gateway", // <1>
      "password": "password", // <2>
      "enable_shared_bucket_access": true, // <3>
      "import_docs": true,
      "num_index_replicas": 0, // <4>
      "import_filter": `
        function(doc) { // <5>
          if (doc.type != "mobile") {
            return false
          }
          return true
        }`,
      "users": {
        "GUEST": { "disabled": false, "admin_channels": ["*"] }
      },
      "sync": `function (doc, oldDoc) {
        if (doc.sdk) {
          channel(doc.sdk);
        }
      }`
    }
  }
  //  ... may be followed by additional configuration data as required by the user ...
}
//
// end::import-filter-config[]

// tag::sync-function-config[]
//
{
  //  ... may be preceded by additional configuration data as required by the user ...
  "databases": {
    "getting-started-db": {
      "server": "http://localhost:8091",
      "bucket": "getting-started-bucket",
      "username": "sync_gateway", // <1>
      "password": "password", // <2>
      "enable_shared_bucket_access": true, // <3>
      "import_docs": true,
      "num_index_replicas": 0, // <4>
      "users": {
        "GUEST": { "disabled": false, "admin_channels": ["*"] },
      },
      "sync": `function (doc, oldDoc) { //<5>
        if (doc.sdk) {
          channel(doc.sdk);
        }
        }`,
        //  ... may be followed by additional configuration data as required by the user ...
    }
  }
}
//
// end::sync-function-config[]


// tag::icr-simple-conflict-resolver[]
"replications": [
  {
  "replication_id": "replication1",
  // other config as required
  "conflict_resolution_type": "custom",
  "custom_conflict_resolver": `
    function(conflict) {
      if  (conflict.LocalDocument.type == "a-doctype-1") &&
          (conflict.RemoteDocument.type == "a-doctype-1")
       {
          // Invoke the built in resolver logic for remoteWins
          return remoteWinsPolicy(conflict);
        }
        else {
          // Invoke the built in default resolver logic
          return defaultPolicy(conflict);
        }
    }
    `
// other config as required
  }
]
// end::icr-simple-conflict-resolver[]

// tag::icr-simple-own-winner-conflict-resolver[]
"replications": [
  {
    // . . . preceding replication details as required
  },
  {
    "replication_id": "replication2",
    // . . .   other config as required
    "conflict_resolution_type": "custom",
    "custom_conflict_resolver": `
      function(conflict) {
        // Custom conflict resolution policy based on priority
        if (conflict.LocalDocument.body.priority > conflict.RemoteDocument.body.priority) {
          // Choose a local winner
          // Optionally apply application logic to manipulate
          // the local object before returning it as the winner
          return conflict.LocalDocument;
        } else if (local.body.priority < remote.body.priority) {
            // Choose a remote winner
            // Optionally apply application logic to manipulate
            // the remote object before returning it as the winner
          return conflict.RemoteDocument;
          }; //end if
        } //end func()
        // Apply the default policy as a catch all
        return defaultPolicy(conflict);
    }` // end resolver property
  }, // end replication2
  {
    // . . . further replication details as required
  }
]
// . . .   other config as required
// end::icr-simple-own-winner-conflict-resolver[]

// tag::my-icr-simple-merge-conflict-resolver[]
"replications": [
  {
    // Replication details for previous replications
  },
  {
  {
    "replication_id": "replication3",
    // other config as required
    "conflict_resolution_type": "custom",
    "custom_conflict_resolver": `
      function(local, remote) {
        if (local.body.priority == remote.body.priority) {
          // create and seed a mergedDoc object
          var mergedDoc = new Object()
          mergedDoc.body = local.body
          mergedDoc.meta = local.meta
          // Add application logic to merge the remote
          // revisions into the mergedDoc

          // Return the merged object
            return {
              mergedDoc
            }
          }
          else {
            // Invoke the built in default resolver logic
            Return UseDefault(doc,oldDoc);
          }
      }
    }`
  },
  {
    // Replication details for subsequent replications
  "replication_id": "replication4",
  // other config as required
  "conflict_resolution_type": "custom",
  "custom_conflict_resolver": `
    function(local, remote) {
      if (doc.type == "a-doctype-1") {
          // Invoke the built in resolver logic for remoteWins
          Return RemoteWins(doc,oldDoc);
        }
        else {
          // Invoke the built in default resolver logic
          Return UseDefault(doc,oldDoc);
        }
    }
    `
// other config as required
  }
]
// end::my-icr-simple-merge-conflict-resolver[]

// tag::xNEW-icr-sample-sync-gateway-config[]
{
  "interface":":5984",
  "adminInterface":":5985",
  "log": ["*"],
  "logging": {
    "log_file_path": "/var/tmp/sglogs",
    "console": {
      "log_level": "debug",
      "log_keys": ["*"]
    },
    "error": {
      "enabled": true,
      "rotation": {
        "max_size": 20,
        "max_age": 180
      }
    },
    "warn": {
      "enabled": true,
      "rotation": {
        "max_size": 20,
        "max_age": 90
      }
    },
    "info": {
      "enabled": false
    },
    "debug": {
      "enabled": false
    }
  },
  "databases": {
       "localdb1": {
            "import_docs": true,
            "bucket":"localdb1",
            "server": "couchbase://cb-server",
            "enable_shared_bucket_access":true,
            "delta_sync": {
              "enabled": true
            },
            "import_filter": `
              function(doc) {
                return true;
              }
              `,
            "username": "admin",
            "password": "password",
            "users":{
                "admin": {"password": "password", "admin_channels": ["*"]},
                "user1": {"password": "password", "admin_channels":["channel.user1"]}
            },
           "num_index_replicas":0,
           "sgreplicate_enabled":false,
           "replications":{
               "pushandpull-with-target-continuous-1" : {
                   "direction": "pushAndPull",
                   "conflict_resolution_type":"custom",
                    "custom_conflict_resolver":`
                                function(conflict) {
                                    var remoteDoc = conflict.RemoteDocument;
                                     console.log("full remoteDoc doc: "+JSON.stringify(remoteDoc));
                                    var localDoc = conflict.LocalDocument;
                                    console.log("full remoteDoc doc: "+JSON.stringify(localDoc));
                                    var mergedDoc = {...localDoc,...remoteDoc};
                                    console.log("full remoteDoc doc: "+JSON.stringify(mergedDoc));
                                    return mergedDoc;

                    }`,
                   "purge_on_removal":true,
                   "remote": "http://user1:password@11.222.333.5:4984/db-remote",
                   "filter":"sync_gateway/bychannel",
                   "query_params": {
                       "channels":["channel.user1"]
                   },
                   "enable_delta_sync":  true,
                    "batch_size" :1000,
                    "continuous": true,
                    "state": "running"
               }
           },
          "sync": `
      function sync(doc, oldDoc) {
        /* sanity check */
        // check if document was removed from server or via SDK
        // In this case, just return
        if (isRemoved()) {
          return;
        }

        /* Routing */
        // Add doc to the user's channel.
        channel("channel.user1");

        // This is when document is removed via SDK or directly on server
        function isRemoved() {
          return( isDelete() && oldDoc == null);
        }

        function isDelete() {
          return (doc._deleted == true);
        }

      }
            `
          },
    "localdb2": {
      "import_docs": true,
      "bucket":"localdb2",
      "server": "couchbase://cb-server",
      "enable_shared_bucket_access":true,
      "delta_sync": {
        "enabled": true
      },
      "import_filter": `
        function(doc) {
          return true;
        }
        `,
      "username": "admin",
      "password": "password",
      "users":{
          "admin": {"password": "password", "admin_channels": ["*"]},
          "user1": {"password": "password", "admin_channels":["channel.user1"]}
      },
     "num_index_replicas":0,
     "sgreplicate_enabled":true,
     "replications":{
         "pull-from-target-continuous-2" : {
             "direction": "pull",
             "purge_on_removal":true,
             "remote": "http://user1:password@11.222.333.5:4984/db2name",
             "conflict_resolution_type":"custom",
             "custom_conflict_resolver":`
                    function(conflict) {
                        console.log("full remoteDoc doc: "+JSON.stringify(conflict.RemoteDocument));
                        return conflict.RemoteDocument;

                    }`,
             "filter":"sync_gateway/bychannel",
             "query_params": {
                 "channels":["channel.user1"]
             },
             "enable_delta_sync":  true,
             "batch_size" :1000,
             "continuous": true,
            "state": "stopped"
         }
     },
    "sync": `
function sync(doc, oldDoc) {
  /* sanity check */
  // check if document was removed from server or via SDK
  // In this case, just return
  if (isRemoved()) {
    return;
  }

  /* Routing */
  // Add doc to the user's channel.
  channel("channel.user1");

  // This is when document is removed via SDK or directly on server
  function isRemoved() {
    return( isDelete() && oldDoc == null);
  }

  function isDelete() {
    return (doc._deleted == true);
  }


}
      `
    }
  }
  ]
  // other config as required
// end::xNEW-icr-sample-sync-gateway-config[]


// tag::NEW-icr-sample-sync-gateway-config[]
{
  "interface":":5984",
  "adminInterface":":5985",
  "log": ["*"],
  "logging": {
    "log_file_path": "/var/tmp/sglogs",
    "console": {
      "log_level": "debug",
      "log_keys": ["*"]
    },
    "error": {
      "enabled": true,
      "rotation": {
        "max_size": 20,
        "max_age": 180
      }
    },
    "warn": {
      "enabled": true,
      "rotation": {
        "max_size": 20,
        "max_age": 90
      }
    },
    "info": {
      "enabled": false
    },
    "debug": {
      "enabled": false
    }
  },
  "databases": {
       "localdb1": {
            "import_docs": true,
            "bucket":"localdb1",
            "server": "couchbase://cb-server",
            "enable_shared_bucket_access":true,
            "delta_sync": {
              "enabled": true
            },
            "import_filter": `
              function(doc) {
                return true;
              }
              `,
            "username": "admin",
            "password": "password",
            "users":{
                "admin": {"password": "password", "admin_channels": ["*"]},
                "user1": {"password": "password", "admin_channels":["channel.user1"]}
            },
           "num_index_replicas":0,
           "sgreplicate_enabled":false,
           "replications":{
               "pushandpull-with-target-continuous-1" : {
                   "direction": "pushAndPull",
                   "conflict_resolution_type":"custom",
                    "custom_conflict_resolver":`
                                function(conflict) {
                                    var remoteDoc = conflict.RemoteDocument;
                                     console.log("full remoteDoc doc: "+JSON.stringify(remoteDoc));
                                    var localDoc = conflict.LocalDocument;
                                    console.log("full remoteDoc doc: "+JSON.stringify(localDoc));
                                    var mergedDoc = {...localDoc,...remoteDoc};
                                    console.log("full remoteDoc doc: "+JSON.stringify(mergedDoc));
                                    return mergedDoc;

                    }`,
                   "purge_on_removal":true,
                   "remote": "http://user1:password@11.222.333.5:4984/db-remote",
                   "filter":"sync_gateway/bychannel",
                   "query_params": {
                       "channels":["channel.user1"]
                   },
                   "enable_delta_sync":  true,
                    "batch_size" :1000,
                    "continuous": true,
                    "state": "running"
               }
           },
          "sync": `
      function sync(doc, oldDoc) {
        /* sanity check */
        // check if document was removed from server or via SDK
        // In this case, just return
        if (isRemoved()) {
          return;
        }

        /* Routing */
        // Add doc to the user's channel.
        channel("channel.user1");

        // This is when document is removed via SDK or directly on server
        function isRemoved() {
          return( isDelete() && oldDoc == null);
        }

        function isDelete() {
          return (doc._deleted == true);
        }

      }
            `
          },
    "localdb2": {
      "import_docs": true,
      "bucket":"localdb2",
      "server": "couchbase://cb-server",
      "enable_shared_bucket_access":true,
      "delta_sync": {
        "enabled": true
      },
      "import_filter": `
        function(doc) {
          return true;
        }
        `,
      "username": "admin",
      "password": "password",
      "users":{
          "admin": {"password": "password", "admin_channels": ["*"]},
          "user1": {"password": "password", "admin_channels":["channel.user1"]}
      },
     "num_index_replicas":0,
     "sgreplicate_enabled":true,
     "replications":{
         "pull-from-target-continuous-2" : {
             "direction": "pull",
             "purge_on_removal":true,
             "remote": "http://user1:password@11.222.333.5:4984/db2name",
             "conflict_resolution_type":"custom",
             "custom_conflict_resolver":`
                    function(conflict) {
                        console.log("full remoteDoc doc: "+JSON.stringify(conflict.RemoteDocument));
                        return conflict.RemoteDocument;

                    }`,
             "filter":"sync_gateway/bychannel",
             "query_params": {
                 "channels":["channel.user1"]
             },
             "enable_delta_sync":  true,
             "batch_size" :1000,
             "continuous": true,
            "state": "stopped"
         }
     },
    "sync": `
function sync(doc, oldDoc) {
  /* sanity check */
  // check if document was removed from server or via SDK
  // In this case, just return
  if (isRemoved()) {
    return;
  }

  /* Routing */
  // Add doc to the user's channel.
  channel("channel.user1");

  // This is when document is removed via SDK or directly on server
  function isRemoved() {
    return( isDelete() && oldDoc == null);
  }

  function isDelete() {
    return (doc._deleted == true);
  }


}
      `
    }
  }
}
// end::NEW-icr-sample-sync-gateway-config[]


// tag::old-icr-sample-sync-gateway-config[]
{
  "logging": {
    "console": {
      "log_keys": ["*"]
    }
  },
  "databases": {
    "db1": {
      "server": "couchbase://localhost",
      "username": "username",
      "password": "password",
      "bucket": "default",
      "allow_conflicts": false,
      "revs_limit": 20,
      "sgreplicate_enabled": true,
      "replications": [
        { // first replication - uses custom resolver
          "replication_id": "this-repl-1",
          "direction": "push-and-pull",
          "remote": "http://otherhost.com:8092/db1",
          "continuous": true,
          "conflict_resolution_type": "custom",
          "custom_conflict_resolver": `
              function (local, remote) {
                // Custom conflict resolution policy
                if (local.body.priority > remote.body.priority) {
                  return {
                    body: local.body,
                    meta: local.meta
                  };
                } else if (local.body.priority < remote.body.priority) {
                  return {
                    body: remote.body,
                    meta: remote.meta
                  };
                }
              // Apply default policy if it doesn't satisfy custom policy
              return defaultPolicy(local, remote);
              }
              `
        }
    },
    "db2": {
      "server": "couchbase://localhost",
      "username": "username",
      "password": "password",
      "bucket": "default1",
      "allow_conflicts": false,
      "revs_limit": 20
      "users": {
        "GUEST": {
          "disabled": false,
          "admin_channels": ["*"]
        }
      },
      "sgreplicate_enabled": true,
      "replications": [
        { // Second replication uses default auto resolution policy
          "replication_id": "this-repl-2",
          "direction": "pull",
          "remote": "http://otherhost.com:4985/db2",
          "continuous": true,
          "conflict_resolution_type": "default",
        }
        { // Third replication -- uses localWins policy
          "replication_id": "this-repl-3",
          "direction": "push",
          "remote": "http://otherhost.com:4985/db2",
          "continuous": true,
          "conflict_resolution_type": "localWins",
        }
      ]

    },
  },
  // SG-Replicate 1.0 Replications
  "replications": [
    {
      "replication_id": "push-to-other-continuous",
      "source": "http://localhost:4985/db",
      "target": "http://otherhost.com:4985/db",
      "continuous": true
    },
    {
      "replication_id": "pull-from-other-continuous",
      "source": "http://otherhost.com:4985/db",
      "target": "http://localhost:4985/db",
      "continuous": true
    }
  ]
}
// end::old-icr-sample-sync-gateway-config[]




// tag::icr-sample-sync-gateway-config[]
{
  "interface":":5984",
  "adminInterface":":5985",
  "log": ["*"],
  "logging": {
    "log_file_path": "/var/tmp/sglogs",
    "console": {
      "log_level": "debug",
      "log_keys": ["*"]
    },
    "error": {
      "enabled": true,
      "rotation": {
        "max_size": 20,
        "max_age": 180
      }
    },
    "warn": {
      "enabled": true,
      "rotation": {
        "max_size": 20,
        "max_age": 90
      }
    },
    "info": {
      "enabled": false
    },
    "debug": {
      "enabled": false
    }
  },
  "databases": {
       "localdb1": {
            "import_docs": true,
            "bucket":"localdb1",
            "server": "couchbase://cb-server",
            "enable_shared_bucket_access":true,
            "delta_sync": {
              "enabled": true
            },
            "import_filter": `
              function(doc) {
                return true;
              }
              `,
            "username": "admin",
            "password": "password",
            "users":{
                "admin": {"password": "password", "admin_channels": ["*"]},
                "user1": {"password": "password", "admin_channels":["channel.user1"]}
            },
           "num_index_replicas":0,
           "sgreplicate_enabled":false,
           "replications":{
               "pushandpull-with-target-continuous-1" : {
                   "direction": "pushAndPull",
                   "conflict_resolution_type":"custom",
// tag::icr-simple-merge-conflict-resolver[]
                    "custom_conflict_resolver":`
                      function(conflict) {
                          if (  (conflict.LocalDocument.type != null) &&
                                (conflict.RemoteDocument.type != null) &&
                                (conflict.LocalDocument.type == "usedefault"))
                          {
                              console.log("Will use default policy");
                              // Resolve using built-in policy
                              return defaultPolicy(conflict);
                          }
                          else
                          {
                            // Merge local and remote docs
                            var remoteDoc = conflict.RemoteDocument;
                            console.log("full remoteDoc doc: "+JSON.stringify(remoteDoc));
                            var localDoc = conflict.LocalDocument;
                            console.log("full localDoc doc: "+JSON.stringify(localDoc));
                            var mergedDoc = extend({}, localDoc, remoteDoc);

                            console.log("full merged doc: "+JSON.stringify(mergedDoc));
                            // Resolve using this merged doc as the winner
                            return mergedDoc;

                            function extend(target) {
                                var sources = [].slice.call(arguments, 1);
                                sources.forEach(function (source) {
                                    for (var prop in source) {
                                        target[prop] = source[prop];
                                    }
                                });
                                return target;
                            } // end function extend()
                          } // end if
                      }` // end function()
// end::icr-simple-merge-conflict-resolver[]
                    , // end custom_conflict_resolver
                   "purge_on_removal":true,
                   "remote": "http://user1:password@11.222.333.5:4984/db-remote",
                   "filter":"sync_gateway/bychannel",
                   "query_params": {
                       "channels":["channel.user1"]
                   },
                   "enable_delta_sync":  true,
                    "batch_size" :1000,
                    "continuous": true,
                    "state": "running"
               }
           },
          "sync": `
      function sync(doc, oldDoc) {
        /* sanity check */
        // check if document was removed from server or via SDK
        // In this case, just return
        if (isRemoved()) {
          return;
        }

        /* Routing */
        // Add doc to the user's channel.
        channel("channel.user1");

        // This is when document is removed via SDK or directly on server
        function isRemoved() {
          return( isDelete() && oldDoc == null);
        }

        function isDelete() {
          return (doc._deleted == true);
        }

      }
            `
          },
    "localdb2": {
      "import_docs": true,
      "bucket":"localdb2",
      "server": "couchbase://cb-server",
      "enable_shared_bucket_access":true,
      "delta_sync": {
        "enabled": true
      },
      "import_filter": `
        function(doc) {
          return true;
        }
        `,
      "username": "admin",
      "password": "password",
      "users":{
          "admin": {"password": "password", "admin_channels": ["*"]},
          "user1": {"password": "password", "admin_channels":["channel.user1"]}
      },
     "num_index_replicas":0,
     "sgreplicate_enabled":true,
     "replications":{
         "pull-from-target-continuous-2" : {
             "direction": "pull",
             "purge_on_removal":true,
             "remote": "http://user1:password@11.222.333.5:4984/db2name",
             "conflict_resolution_type":"remoteWins",
             "filter":"sync_gateway/bychannel",
             "query_params": {
                 "channels":["channel.user1"]
             },
             "enable_delta_sync":  true,
             "batch_size" :1000,
             "continuous": true,
            "state": "stopped"
         }
     },
    "sync": `
        function sync(doc, oldDoc) {
          /* sanity check -- was doc removed from server or via SDK? */
          // In which case, just return it
          if (isRemoved()) {
            return;
          }

          /* Routing -- add doc to the user's channel. */
          channel("channel.user1");

          // This is when document is removed via SDK or directly on server
          function isRemoved() {
            return( isDelete() && oldDoc == null);
          }

          function isDelete() {
            return (doc._deleted == true);
          }


        }
        `
    }
  }
}
// end::icr-sample-sync-gateway-config[]








